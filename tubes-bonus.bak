;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname tubes-bonus) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require "lib-tubes.rkt")

;; A Game is (make-game Nat Nat (listof (listof Sym)))
(define-struct game (tubesize maxcolours tubes))

;;; Constants

(define emptygame
  (make-game 0 5
             (list empty empty empty empty empty)))

(define emptygame2
  (make-game 10 3 empty))

(define emptygame3
  (make-game 10 3 (list empty empty)))

(define smallgame1
  (make-game 2 2
             (list (list 'blue 'red)
                   (list 'blue 'red)
                   (list))))

(define smallgame2
  (make-game 2 3
             (list (list 'blue 'red)
                   (list 'blue 'red)
                   (list))))

(define smallinvalidgame1
  (make-game 2 1
             (list (list 'blue 'red)
                   (list 'blue 'red)
                   (list))))


(define smallinvalidgame2
  (make-game 2 2
             (list (list 'blue 'red)
                   (list 'blue 'blue)
                   (list))))

(define smallinvalidgame3
  (make-game 2 2
             (list (list 'blue 'red 'blue)
                   (list 'red)
                   (list))))


(define smallgamefinal
  (make-game 2 2
             (list (list)
                   (list 'blue 'blue)
                   (list 'red 'red))))


(define mediumgame
  (make-game 2 3
             (list (list 'blue 'red)
                   (list 'red 'yellow)
                   (list 'yellow 'blue)
                   (list))))

(define mediumgamestuck
  (make-game 2 3
             (list (list 'blue 'red)
                   (list 'red 'yellow)
                   (list 'yellow 'blue)
                   )))

(define largergame
  (make-game 3 3
             (list (list 'blue 'red 'red)
                   (list 'yellow 'blue 'yellow)
                   (list 'red 'yellow 'blue)
                   (list))))

(define biggame
  (make-game 5 3
             (list (list 'blue 'blue 'red 'red 'yellow)
                   (list 'red 'red 'yellow 'blue 'red)
                   (list 'yellow 'blue 'blue 'yellow 'yellow)
                   (list)
                   (list))))

(define biggame2
  (make-game 5 3
             (list (list 'yellow 'blue 'blue 'yellow 'yellow)
                   (list 'red 'red 'yellow 'blue 'red)
                   (list)
                   (list 'blue 'blue 'red 'red 'yellow)
                   (list))))

(define biggamesolve
  (make-game 5 3
             (list (list 'blue 'blue 'blue 'blue 'blue)
                   (list 'red 'red 'red 'red 'red)
                   (list 'yellow 'yellow 'yellow 'yellow 'yellow)
                   (list)
                   (list))))

(define hugegame
  (make-game 4 9
             (list (list 'purple 'pink 'yellow 'blue)
                   (list 'blue 'green 'purple 'white)
                   (list 'orange 'yellow 'black 'blue)
                   (list 'white 'orange 'orange 'pink)
                   (list 'pink 'red 'red 'black)
                   (list 'yellow 'green 'orange 'blue)
                   (list 'white 'purple 'red 'yellow)
                   (list 'green 'red 'green 'black)
                   (list 'purple 'black 'white 'pink)
                   (list)
                   (list))
             ))
(define my-game
  (make-game 4 4
             (list (list 'blue 'blue 'red 'red )
                   (list 'red 'blue 'red)
                   (list 'yellow 'blue 'yellow 'yellow)
                   (list 'yellow)
                   (list)
                   (list))))

;; stubs for finished-game? and next-games
;; Students will need to modify these functions to make solve work correctly
;; These stubs will at least allow the entire program to run without error

;;;;;
;; a

;;(check-colour? size num los) produces true if each symbol in the list
;; appears exactly size times and if there are at most num different
;; symbols; otherwise, check-colour? will produce false.
;; Examples:
(check-expect (check-colour? 7 3 (list 'blue 'red 'blue 'red)) false)
;; check-colour?: Nat Nat (listof Sym) -> Bool
(define (check-colour? size num los)
  (cond
    [(empty? los) (>= num 0)]
    [(= size (foldr
              (lambda (x occurance)
                (cond[(symbol=? x (first los)) (add1 occurance)]
                     [else occurance])) 0 los))
     (check-colour? size (sub1 num) (filter (lambda (x) (not (symbol=? x (first los)))) los))]
    [else false]))

;; Tests:
(check-expect (check-colour? 2 2 (list 'blue 'red 'blue 'red))  true)
(check-expect (check-colour? 2 3 (list 'blue 'red 'blue 'red))  true)
(check-expect (check-colour? 0 0 '()) true)
(check-expect (check-colour? 1 1 '(red)) true)
(check-expect (check-colour? 1 2 '(yellow red blue)) false)
(check-expect (check-colour? 1 2 '(yellow red red)) false)


;; b

;; (valid-game? gm) produces true
;; if gm is a valid game, and false otherwise.
;; Examples:
(check-expect (valid-game? smallgame2) true)
;; valid-game?: Game -> Bool
(define (valid-game? gm)
  (and (check-colour? (game-tubesize gm)
                    (game-maxcolours gm)
                    (foldr
                     (lambda (x acc)
                       (foldr (lambda (y acc1) (cons y acc1)) acc x))
                     empty (game-tubes gm)))
       (foldr (lambda (x acc)
                (and (<= (length x) (game-tubesize gm)) acc)) true (game-tubes gm))))
;; Tests:
(check-expect (valid-game? smallgame1) true)
(check-expect (valid-game? biggame) true)
(check-expect (valid-game? biggame2) true)
(check-expect (valid-game? 
  (make-game 3 3
             (list (list 'blue 'red)
                   (list 'red 'yellow)
                   (list 'yellow 'blue)
                   (list)))) false)
(check-expect (valid-game? 
  (make-game 2 2
             (list (list 'blue 'red)
                   (list 'red 'yellow)
                   (list 'yellow 'blue)
                   (list)))) false)
(check-expect (valid-game? smallinvalidgame1) false)
(check-expect (valid-game? smallinvalidgame2) false)
(check-expect (valid-game? smallinvalidgame3) false)
(check-expect (valid-game? emptygame) true)


;; c
;; (remove-completed gm) consumes a Game, gm, and produces a Game which
;; is similar to gm but has any completed tubes removed
;; Examples:
(check-expect (remove-completed smallgame1) smallgame1)
;; remove-completed: Game -> Game
(define (remove-completed gm)
  (local[(define game-tubes-after
           (foldr (lambda (x acc)
                    (cond
                      [(and (= (length x) (game-tubesize gm))
                            (empty? (filter (lambda (y) (not (symbol=? y (first x)))) x)))
                       acc]
                      [else (cons x acc)])) empty (game-tubes gm)))]
  (make-game (game-tubesize gm)
             (- (game-maxcolours gm) (- (length (game-tubes gm)) (length game-tubes-after)))
             game-tubes-after)))
;; Tests:
;;(check-expect (remove-completed emptygame) (make-game 0 0
;;             (list empty empty empty empty empty)))
(check-expect (remove-completed smallgame1) smallgame1)
(check-expect (remove-completed biggamesolve) (make-game 5 0
             (list (list)
                   (list))))
(check-expect (remove-completed
               (make-game 2 3
                          (list (list 'blue 'red)
                                (list 'red 'blue)
                                (list 'yellow 'yellow))))
              (make-game 2 2
                          (list (list 'blue 'red)
                                (list 'red 'blue))))


;; d
;; (finished-game? gm) produces
;; true if the game is finished, and false otherwise.
;; Examples:
(check-expect (finished-game? biggamesolve) true)
;; finished-game?: Game -> Bool
(define (finished-game? gm)
  (empty? (filter (lambda (x) (not (empty? x))) (game-tubes (remove-completed gm)))))
;; Tests:
(check-expect (finished-game? smallgame1) false)
(check-expect (finished-game? emptygame) true)
(check-expect (finished-game? emptygame2) true)
(check-expect (finished-game?
               (make-game 2 3
                          (list (list 'blue 'red)
                                (list 'red 'blue)
                                (list 'yellow 'yellow)))) false)


;; e
;; (num-blocks llos) produces the number of “blocks” contained in llos.
;; A block is a consecutive sequence of identical symbols within one list.
;; Examples:
(check-expect (num-blocks (list (list 'blue 'red)
                                (list 'blue 'red)
                                (list))) 4)
;; num-blocks: (listof (listof Sym)) -> Nat
(define (num-blocks llos)
  (cond
    [(empty? llos) 0]
    [(empty? (first llos)) (num-blocks (rest llos))]
    [else (+ (length (foldr
                      (lambda (x acc)
                        (cond
                          [(or (empty? acc)
                               (not (symbol=? x (first acc))))
                           (cons x acc)]
                          [(symbol=? x (first acc)) acc])) empty (first llos)))
             (num-blocks (rest llos)))]))
;; Tests:
(check-expect (num-blocks (list empty empty empty empty empty)) 0)
(check-expect (num-blocks empty) 0)
(check-expect (num-blocks (list (list 'blue 'blue 'red 'red 'yellow)
                                (list 'red 'red 'yellow 'blue 'red)
                                (list 'yellow 'blue 'blue 'yellow 'yellow)
                                (list)
                                (list))) 10)
(check-expect (num-blocks (list (list 'blue 'red)
                                (list 'blue 'red)
                                (list))) 4)
(check-expect (num-blocks (list (list 'red 'red)
                                (list 'blue 'blue)
                                (list))) 2)


;; f
;; (equiv-game? gm1 gm2) produces true if gm1 and gm2 are equivalent,
;; and false otherwise.
;; Examples:
(check-expect (equiv-game? smallgame1 smallgame2) false)
;; equiv-game?: Game Game -> Bool
(define (equiv-game? gm1 gm2)
  (local[(define gml1 (game-tubes gm1))
         (define gml2 (game-tubes gm2))
         ;; (tube-equiv? los1 los2) produces true if all the symbols in los1 are the same
         ;; as that of los2 in the same order, and false otherwise.
         ;; tube-equiv?: (listof Sym) (listof Sym) -> Bool
         (define (tube-equiv? los1 los2)
           (cond
             [(empty? los1) (empty? los2)]
             [(empty? los2) false]
             [else (and (symbol=? (first los1) (first los2))
                        (tube-equiv? (rest los1) (rest los2)))]))
         ;; (filter-tube los1 gml2) filters out one of the same element as los1
         ;; in gml1, and produces the rest of the game
         ;; filter-tube: (listof Sym) Game -> Game
         (define (filter-tube los1 gml2)
           (cond
             [(empty? gml2) empty]
             [(tube-equiv? los1 (first gml2)) (rest gml2)]
             [else (cons (first gml2) (filter-tube los1 (rest gml2)))]))]
    (cond
      [(empty? gml1) (and (empty? gml2)
                          (= (game-maxcolours gm1) (game-maxcolours gm2))
                          (= (game-tubesize gm1) (game-tubesize gm2)))]
      [else
       (and (= (length gml1) (length gml2))
            (equiv-game?
             (make-game (game-maxcolours gm1)
                        (game-tubesize gm1)
                        (rest gml1))
             (make-game (game-maxcolours gm2)
                        (game-tubesize gm2)
                        (filter-tube (first gml1) gml2))))])))
;; Tests:
(check-expect (equiv-game? mediumgame biggame) false)
(check-expect (equiv-game? smallgame1 smallgame2) false)
(check-expect (equiv-game? (make-game 2 3
             (list (list 'blue 'red)
                   (list 'blue 'red)
                   (list)))
                           (make-game 2 3
             (list (list 'blue 'red)
                   (list 'blue 'red)
                   (list 'blue 'red)))) false)
(check-expect (equiv-game? biggame biggame2) true)
(check-expect (equiv-game? biggame biggame) true)
(check-expect (equiv-game? biggame biggamesolve) false)


;; g
;; (all-equiv? log1 log2) produces true if every game in log1 has
;; one equivalent game in log2, and every game in log2 has one
;; equivalent game in log1, and otherwise produces false.
;; Examples:
(check-expect (all-equiv? (list smallgame1 biggame) (list biggame2 smallgame1)) true)
;; all-equiv?: (listof Game) (listof Game) -> Bool
(define (all-equiv? log1 log2)
  (local[;; (filter-game los1 log2)  filters out one of the same element as los1
         ;; in log2, and returns the rest of log2
         ;; filter-game: Game (listof Game) -> (listof Game)
         (define (filter-game los1 log2)
           (cond
             [(empty? log2) empty]
             [(equiv-game? los1 (first log2)) (rest log2)]
             [else (cons (first log2) (filter-game los1 (rest log2)))]))]
  (cond
      [(empty? log1) (empty? log2)]
      [else
       (and (= (length log1) (length log2))
            (all-equiv? (rest log1) (filter-game (first log1) log2)))])))
;; Tests:
(check-expect (all-equiv? (list smallgame1 biggame) (list biggame2 smallgame1)) true)
(check-expect (all-equiv? empty empty) true)
(check-expect (all-equiv? (list emptygame2) (list emptygame2)) true)
(check-expect (all-equiv? (list smallgame1 smallgame1) (list smallgame1 smallgame1)) true)
(check-expect (all-equiv? (list smallgame1 biggame smallgame2)
                          (list biggame2 smallgame1)) false)
(check-expect (all-equiv? (list
 (make-game 2 2 (list (list 'blue 'red) (list 'red) (list 'blue)))
 (make-game 2 2 (list (list 'red) (list 'blue 'red) (list 'blue))))
                          (list
 (make-game 2 2 (list (list 'blue 'red) (list 'yellow) (list 'blue)))
 (make-game 2 2 (list (list 'red) (list 'blue 'red) (list 'blue))))) false)

;; h
;; (next-games gm) produces a list of Games that can
;; happen by moving one ball from gm.
;; Examples:
(define (test-next-games gm expected) (all-equiv? (next-games gm) expected))
(check-expect (test-next-games smallgame1 (list (make-game 2 2
                               (list (list 'blue 'red)
                                     (list 'red)
                                     (list 'blue)))
                                                (make-game 2 2
                               (list (list 'red)
                                     (list 'blue 'red)
                                     (list 'blue))))) true)

;; next-games: Game -> (listof Game)
(define (next-games gm) (next-games/acc gm 0 empty))

;; Tests:
(check-expect (test-next-games emptygame empty) true)
(check-expect (test-next-games emptygame (list smallgame1)) false)

;; (next-games/acc gm index my-llos) produces a list of Games that can
;; happen by moving one ball from gm using accumulative recursion.
;; Examples:
(check-expect (next-games/acc smallgame1 0 empty)
              (list (make-game 2 2
                               (list (list 'blue 'red)
                                     (list 'red)
                                     (list 'blue)))
                    (make-game 2 2
                               (list (list 'red)
                                     (list 'blue 'red)
                                     (list 'blue)))))
;; next-games/acc: Game Nat (listof Game) -> (listof Game)
(define (next-games/acc gm index my-llos)
  (local[(define gm-los (game-tubes gm))]
    (cond
      [(>=  index (length gm-los)) my-llos]
      [(empty? (list-ref gm-los index))
       (next-games/acc gm (add1 index) my-llos)]
      [else (next-games/acc gm (add1 index) (append 
      (filter game?
              (build-list
               (length gm-los)
               (lambda (x)
                 (cond
                   [(or (= index x)
                        (>= (length (list-ref gm-los x)) (game-tubesize gm)))
                    false]
                   [else
                     (make-game
                      (game-tubesize gm)
                      (game-maxcolours gm)
                      (foldr cons empty (build-list (length gm-los) (lambda (y) (cond
                         [(= y index)
                          (rest (list-ref gm-los y))]
                         [(= x y)
                          (cons (first (list-ref gm-los index)) (list-ref gm-los y))]
                         [else
                          (list-ref gm-los y)])))))])))) my-llos))])))



(define (my-member? los1 log2)
           (cond
             [(empty? log2) false]
             [(equiv-game? los1 (first log2)) true]
             [else (my-member? los1 (rest log2))]))
;; (solve gm draw-option) determines if the game gm is solveable,
;; and will also draw each possible move depending on the draw-option

;; Examples:
;; students should provide some here, or just in tests

;; solve: Game (anyof 'off 'norm 'slow 'fast) -> Bool

(define (solve gm draw-option)
  (local
    [(define setup (puzzle-setup gm draw-option))
     (define (solve-helper to-visit visited)
       (cond
         [(empty? to-visit) false]
         [else
          (local
            [(define draw (draw-board (first to-visit) draw-option))] 
            (cond
              [(finished-game? (first to-visit)) true]
              [(my-member? (first to-visit) visited)
               (solve-helper (rest to-visit) visited)]
              [else
               (local [(define nbrs (next-games (first to-visit)))
                       (define new (filter (lambda (x) (not (my-member? x visited))) nbrs))
                       (define new-to-visit (append new (rest to-visit)))
                       (define new-visited (cons (first to-visit) visited))]
                 (solve-helper new-to-visit new-visited))]))]))]
    (solve-helper (list gm) empty)))

;; Test cases that can be uncommented as the solution is completed

(check-expect (solve smallgame1 'slow) true)
;(check-expect (solve mediumgamestuck 'slow) false)

;; Below is the format for testing and timing the solution:
;; be sure to remove any other check-expects when measuring your timing

(check-expect (time (solve mediumgame 'off)) true)
(check-expect (time (solve largergame 'off)) true)
;(check-expect (time (solve biggame 'slow)) true)
;(check-expect (time (solve hugegame 'off)) true)

